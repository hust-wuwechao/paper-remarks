但是数据流计算模型和参数服务器计算模型的一致性模型不尽相同，参数服务器的一致性模型比如BSP或者SSP都会打破数据流原有的异步计算逻辑。参数服务器和数据流结合的灾备策略和一致性管理策略需要仔细的设计才能很好地统一和融合。
为了兼顾运行效率和易用性，机器学习模型训练计算框架的编程语言的选择一般采用前后端分离的方式：以C/C++、Java/Scala等作为后端以保证系统运行效率，使用Python、R等作为前端以提供更为易用的编程接口。对于后端语言的选择上，主流的就是Java和C++，这两者各有优劣：
在生态上，Java由于易于开发使得其生态要远远好于C++，很多大数据计算框架都基于Java或者类Java语言开发；在可移植性上，由于JVM屏蔽了很多底层差异性，所以Java要优于C++；在内存管理上，基于GC的Java在大数据、同步分布式并行的情况下，效率要远低于优化过的C++的效率，因为大数据情况下，GC的概率会很高，而一旦一台服务器开始GC其计算能力将受很大影响，整体集群尤其在同步情况下的计算效率也会大打折扣，而机器数增加的情况下，在一定时刻触发GC的概率也会大大增加；在语言抽象上，C++的模板机制在编译时刻进行展开，可以做更多的编译优化，在实际执行时除了产生的程序文件更大一些之外，整体执行效率非常高，而与之对应的Java泛型采用类型擦除方式实现，在实际运行时做数据类型cast，会带来很多额外的开销，使得其整体执行效率受到很大影响。
